# https://school.programmers.co.kr/learn/courses/30/lessons/12980

'''
2로 나눌 수 있으면 2로 나누고
2로 나눌 수 없으면 1을 빼고
1을 뺀 횟수를 세자.
'''

# 첫 번째 풀이 (효율성 테스트 2, 5 실패)
def solution(n):
    cnt = 0
    
    while n > 0:                            # n이 0이 될 때까지
        if n % 2:                           # n이 홀수면
            n -= 1                          # 1을 빼고
            cnt += 1                        # 건전지 사용
        else:                               # n이 짝수면
            n //= 2                         # n을 2로 나눔

    return cnt

'''
정확성  테스트
테스트 1 〉	통과 (0.00ms, 10.1MB)
테스트 2 〉	통과 (0.00ms, 10.2MB)
테스트 3 〉	통과 (0.00ms, 10.1MB)
테스트 4 〉	통과 (0.00ms, 10MB)
테스트 5 〉	통과 (0.01ms, 9.91MB)
테스트 6 〉	통과 (0.00ms, 10.3MB)
테스트 7 〉	통과 (0.00ms, 10.1MB)
테스트 8 〉	통과 (0.01ms, 10.2MB)
테스트 9 〉	통과 (0.00ms, 10MB)
테스트 10 〉	통과 (0.01ms, 10.2MB)
테스트 11 〉	통과 (0.00ms, 10.1MB)
테스트 12 〉	통과 (0.00ms, 10.2MB)
테스트 13 〉	통과 (0.00ms, 10.3MB)
테스트 14 〉	통과 (0.00ms, 10.1MB)
테스트 15 〉	통과 (0.00ms, 10.1MB)
테스트 16 〉	통과 (0.00ms, 9.96MB)
테스트 17 〉	통과 (0.00ms, 10MB)
테스트 18 〉	통과 (0.00ms, 10MB)
효율성  테스트
테스트 1 〉	통과 (0.01ms, 10MB)
테스트 2 〉	실패 (시간 초과)
테스트 3 〉	통과 (0.01ms, 10MB)
테스트 4 〉	통과 (0.01ms, 10.1MB)
테스트 5 〉	실패 (시간 초과)
테스트 6 〉	통과 (0.02ms, 10.1MB)
테스트 7 〉	통과 (0.01ms, 10.1MB)
테스트 8 〉	통과 (0.01ms, 10.1MB)
테스트 9 〉	통과 (0.01ms, 10MB)
테스트 10 〉	통과 (0.01ms, 10.1MB)
'''

# 두 번째 풀이 (2의 제곱수 체크)
def isPowerOf2(n):                          # n이 2의 제곱수인지 체크
    return (n & (n - 1)) == 0               # 2의 제곱수 (10, 100, 1000) & n - 1 (01, 011, 0111)
                                            # and 연산하면 0이 나온다면 2의 제곱수
def solution(n):
    cnt = 0
    
    while n > 0:
        if isPowerOf2(n):                   # 2의 제곱수가 된다면 
            cnt += 1
            break                           # 더 반복하지 않고 바로 종료

        if n % 2:
            n -= 1
            cnt += 1
        else:
            n //= 2

    return cnt

'''
테스트 1 〉	통과 (0.00ms, 10.2MB)
테스트 2 〉	통과 (0.00ms, 10.2MB)
테스트 3 〉	통과 (0.00ms, 10MB)
테스트 4 〉	통과 (0.00ms, 10MB)
테스트 5 〉	통과 (0.00ms, 10.1MB)
테스트 6 〉	통과 (0.00ms, 10.1MB)
테스트 7 〉	통과 (0.01ms, 10MB)
테스트 8 〉	통과 (0.01ms, 10.1MB)
테스트 9 〉	통과 (0.01ms, 10.2MB)
테스트 10 〉	통과 (0.01ms, 10.1MB)
테스트 11 〉	통과 (0.01ms, 9.99MB)
테스트 12 〉	통과 (0.01ms, 10.1MB)
테스트 13 〉	통과 (0.00ms, 10.3MB)
테스트 14 〉	통과 (0.01ms, 10.2MB)
테스트 15 〉	통과 (0.01ms, 10.2MB)
테스트 16 〉	통과 (0.00ms, 10.2MB)
테스트 17 〉	통과 (0.01ms, 10.1MB)
테스트 18 〉	통과 (0.00ms, 10.2MB)
효율성  테스트
테스트 1 〉	통과 (0.02ms, 10.1MB)
테스트 2 〉	통과 (0.02ms, 10.1MB)
테스트 3 〉	통과 (0.01ms, 10.1MB)
테스트 4 〉	통과 (0.02ms, 10.1MB)
테스트 5 〉	통과 (0.02ms, 10.2MB)
테스트 6 〉	통과 (0.01ms, 10.1MB)
테스트 7 〉	통과 (0.02ms, 10.1MB)
테스트 8 〉	통과 (0.00ms, 10MB)
테스트 9 〉	통과 (0.01ms, 10.1MB)
테스트 10 〉	통과 (0.01ms, 10.1MB)
'''

# 다른 사람의 풀이
def solution(n):
    return bin(n).count('1')                # 마찬가지로 2로 안 나눠진 나머지가 2진수에서 1이니 1의 개수를 셈

'''
회고 / TIL
- 풀이 방법은 바로 떠올라서 막 풀었는데, 살짝 시간 초과남.
- 그래서 2로 나누다가 2의 제곱수가 되면 바로 종료하도록 수정하니 통과함. 
- 2진수로 풀면 더 쉬운 문제였음. (애초에 2진수는 2로 나눈 나머지들이니)
'''