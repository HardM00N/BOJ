'''
‘큰 수의 법칙'은 일반적으로 통계 분야에서 다루는 내용이지만, 동빈이는 본인만의 방식으로 다르게 사용함. 
동빈이의 큰 수의 법칙은 다양한 수로 이루어진 배열이 있을 때 주어진 수를 M번 더해 가장 큰 수를 만드는 것임. 
단, 배열에 특정한 인덱스에 해당하는 수가 연속해서 K번을 초과해 더해질 수 없는 것이 이 법칙의 특징임. 

예를 들어 순서대로 2, 4, 5, 4, 6으로 이루어진 배열이 있을 때 M이 8이고, K가 3이라고 가정하자.
이 경우 특정한 인덱스의 수가 연속해서 세 번까지만 더해질 수 있으므로
큰 수의 법칙에 따른 결과는 6 + 6 + 6 + 5 + 6 + 6 + 6 + 5인 46이 됨. 

단, 서로 다른 인덱스에 해당하는 수가 같은 경우에도 서로 다른 것으로 간주함. 
예를 들어 순서대로 3, 4, 3, 4, 3으로 이루어진 배열이 있을 때 M이 7이고, K가 2라고 가정하자. 
이 경우 두 번째 원소에 해당하는 4와 네 번째 원소에 해당하는 4를 번갈아 두 번씩 더하는 것이 가능함. 
결과적으로 4 + 4 + 4 + 4 + 4 + 4 + 4 = 28이 도출됨. 

배열의 크기 N, 숫자가 더해지는 횟수 M, 그리고 K가 주어질 때 동빈이의 큰 수의 법칙에 다른 결과를 출력하라.
'''

n, m, k = map(int, input().split())
data = list(map(int, input().split()))

data.sort() # 입력받은 수들 정렬
first = data[n-1]   # 가장 큰 수
second = data[n-2]  # 두 번째로 큰 수

result = 0

while True:
    for i in range(k):  # 가장 큰 수를 k번 더하기
        if m == 0:  # m이 0이라면 반복문 탈출
            break
        result += first
        m -= 1  # 더할 때마다 1씩 빼기
    if m == 0:  # m이 0이라면 반복문 탈출
        break

    result += second
    m -= 1

print(result)

'''
회고 / TIL
- 책을 통해 그리디의 개념을 이해하기 위해 문제를 거의 그대로 필사했음. 
- 입력받은 데이터를 정렬한 뒤, 가장 큰 수와 두 번째로 큰 수를 최대한 활용하는 것이 핵심임. 
- 문제만 이해하면 어렵지 않게 풀 수 있는 문제임. 
'''