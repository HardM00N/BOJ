'''
어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택해 수행하려고 함. 
단, 두 번째 연산은 N이 K로 나누어떨어질 때만 선택할 수 있음. 

1. N에서 1을 뺀다.
2. N을 K로 나눈다. 

예를 들어 N이 17, K가 4라고 가정하자. 이 때 1번의 과정을 한 번 수행하면 N은 16이 됨. 
이후에 2번의 과정을 두 번 수행하면 N은 1이 됨. 
결과적으로 전체 과정을 실행한 횟수는 3이 됨. 이는 N을 1로 만드는 최소 횟수임. 

N과 K가 주어질 때 N이 1이 될 때까지 
1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하시오.
'''

# 단순하게 푸는 답안 예시
n, k = map(int, input().split())
result = 0

# N이 K 이상이라면 K로 계속 나누기
while n >= k:
    # N이 K로 나누어 떨어지지 않는다면 N에서 1씩 빼기
    while n % k != 0:
        n -= 1
        result += 1
    # K로 나누기
    n //= k
    result += 1

# 마지막으로 남은 수에 대해 1씩 빼기
while n > 1:
    n -= 1
    result += 1

print(result)


# 답안 예시
n, k = map(int, input().split())
result = 0

while True:
    # (N == K로 나누어떨어지는 수)가 될 때까지 1씩 빼기
    target = (n // k ) * k
    result += (n - target)
    n = target

    # N이 K보다 작을 때 반복문 탈출
    if n < k:
        break
    result += 1
    n //= k

# 마지막으로 남은 수에 대해 1씩 빼기
result += (n - 1)
print(result)

'''
회고 / TIL
- 실전 문제 3문제 중에서 가장 쉬웠던 것 같음. 
- 배수로 맞춰주고, 최대한 나누고, 나머지를 빼주는 전략이었음. 
- 시간 복잡도를 고려한 동빈님의 답안 코드는 빛이다...
'''